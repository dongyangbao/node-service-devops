// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cloudflare.proto

#include "cloudflare.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace logo {
class CloudflarePutKVRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloudflarePutKVRequest> _instance;
} _CloudflarePutKVRequest_default_instance_;
class CloudflarePutKVResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloudflarePutKVResponse> _instance;
} _CloudflarePutKVResponse_default_instance_;
}  // namespace logo
static void InitDefaultsscc_info_CloudflarePutKVRequest_cloudflare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logo::_CloudflarePutKVRequest_default_instance_;
    new (ptr) ::logo::CloudflarePutKVRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloudflarePutKVRequest_cloudflare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CloudflarePutKVRequest_cloudflare_2eproto}, {}};

static void InitDefaultsscc_info_CloudflarePutKVResponse_cloudflare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logo::_CloudflarePutKVResponse_default_instance_;
    new (ptr) ::logo::CloudflarePutKVResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloudflarePutKVResponse_cloudflare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CloudflarePutKVResponse_cloudflare_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cloudflare_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cloudflare_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cloudflare_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cloudflare_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::logo::CloudflarePutKVRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::logo::CloudflarePutKVRequest, cloudflare_account_),
  PROTOBUF_FIELD_OFFSET(::logo::CloudflarePutKVRequest, cloudflare_namespace_),
  PROTOBUF_FIELD_OFFSET(::logo::CloudflarePutKVRequest, cloudflare_email_),
  PROTOBUF_FIELD_OFFSET(::logo::CloudflarePutKVRequest, cloudflare_auth_key_),
  PROTOBUF_FIELD_OFFSET(::logo::CloudflarePutKVRequest, key_),
  PROTOBUF_FIELD_OFFSET(::logo::CloudflarePutKVRequest, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::logo::CloudflarePutKVResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::logo::CloudflarePutKVResponse, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::logo::CloudflarePutKVRequest)},
  { 11, -1, sizeof(::logo::CloudflarePutKVResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::logo::_CloudflarePutKVRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::logo::_CloudflarePutKVResponse_default_instance_),
};

const char descriptor_table_protodef_cloudflare_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020cloudflare.proto\022\004logo\"\245\001\n\026CloudflareP"
  "utKVRequest\022\032\n\022cloudflare_account\030\001 \001(\t\022"
  "\034\n\024cloudflare_namespace\030\002 \001(\t\022\030\n\020cloudfl"
  "are_email\030\003 \001(\t\022\033\n\023cloudflare_auth_key\030\004"
  " \001(\t\022\013\n\003key\030\005 \001(\t\022\r\n\005value\030\006 \001(\t\")\n\027Clou"
  "dflarePutKVResponse\022\016\n\006status\030\001 \001(\0102[\n\017C"
  "loudflareProto\022H\n\007push_kv\022\034.logo.Cloudfl"
  "arePutKVRequest\032\035.logo.CloudflarePutKVRe"
  "sponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cloudflare_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cloudflare_2eproto_sccs[2] = {
  &scc_info_CloudflarePutKVRequest_cloudflare_2eproto.base,
  &scc_info_CloudflarePutKVResponse_cloudflare_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cloudflare_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cloudflare_2eproto = {
  false, false, descriptor_table_protodef_cloudflare_2eproto, "cloudflare.proto", 336,
  &descriptor_table_cloudflare_2eproto_once, descriptor_table_cloudflare_2eproto_sccs, descriptor_table_cloudflare_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_cloudflare_2eproto::offsets,
  file_level_metadata_cloudflare_2eproto, 2, file_level_enum_descriptors_cloudflare_2eproto, file_level_service_descriptors_cloudflare_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cloudflare_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cloudflare_2eproto)), true);
namespace logo {

// ===================================================================

class CloudflarePutKVRequest::_Internal {
 public:
};

CloudflarePutKVRequest::CloudflarePutKVRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:logo.CloudflarePutKVRequest)
}
CloudflarePutKVRequest::CloudflarePutKVRequest(const CloudflarePutKVRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cloudflare_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cloudflare_account().empty()) {
    cloudflare_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cloudflare_account(), 
      GetArena());
  }
  cloudflare_namespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cloudflare_namespace().empty()) {
    cloudflare_namespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cloudflare_namespace(), 
      GetArena());
  }
  cloudflare_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cloudflare_email().empty()) {
    cloudflare_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cloudflare_email(), 
      GetArena());
  }
  cloudflare_auth_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cloudflare_auth_key().empty()) {
    cloudflare_auth_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cloudflare_auth_key(), 
      GetArena());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:logo.CloudflarePutKVRequest)
}

void CloudflarePutKVRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloudflarePutKVRequest_cloudflare_2eproto.base);
  cloudflare_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cloudflare_namespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cloudflare_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cloudflare_auth_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CloudflarePutKVRequest::~CloudflarePutKVRequest() {
  // @@protoc_insertion_point(destructor:logo.CloudflarePutKVRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CloudflarePutKVRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cloudflare_account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cloudflare_namespace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cloudflare_email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cloudflare_auth_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CloudflarePutKVRequest::ArenaDtor(void* object) {
  CloudflarePutKVRequest* _this = reinterpret_cast< CloudflarePutKVRequest* >(object);
  (void)_this;
}
void CloudflarePutKVRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloudflarePutKVRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloudflarePutKVRequest& CloudflarePutKVRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloudflarePutKVRequest_cloudflare_2eproto.base);
  return *internal_default_instance();
}


void CloudflarePutKVRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:logo.CloudflarePutKVRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cloudflare_account_.ClearToEmpty();
  cloudflare_namespace_.ClearToEmpty();
  cloudflare_email_.ClearToEmpty();
  cloudflare_auth_key_.ClearToEmpty();
  key_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloudflarePutKVRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cloudflare_account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cloudflare_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "logo.CloudflarePutKVRequest.cloudflare_account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cloudflare_namespace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cloudflare_namespace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "logo.CloudflarePutKVRequest.cloudflare_namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cloudflare_email = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_cloudflare_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "logo.CloudflarePutKVRequest.cloudflare_email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cloudflare_auth_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cloudflare_auth_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "logo.CloudflarePutKVRequest.cloudflare_auth_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "logo.CloudflarePutKVRequest.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "logo.CloudflarePutKVRequest.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloudflarePutKVRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:logo.CloudflarePutKVRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cloudflare_account = 1;
  if (this->cloudflare_account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cloudflare_account().data(), static_cast<int>(this->_internal_cloudflare_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "logo.CloudflarePutKVRequest.cloudflare_account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cloudflare_account(), target);
  }

  // string cloudflare_namespace = 2;
  if (this->cloudflare_namespace().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cloudflare_namespace().data(), static_cast<int>(this->_internal_cloudflare_namespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "logo.CloudflarePutKVRequest.cloudflare_namespace");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cloudflare_namespace(), target);
  }

  // string cloudflare_email = 3;
  if (this->cloudflare_email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cloudflare_email().data(), static_cast<int>(this->_internal_cloudflare_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "logo.CloudflarePutKVRequest.cloudflare_email");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cloudflare_email(), target);
  }

  // string cloudflare_auth_key = 4;
  if (this->cloudflare_auth_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cloudflare_auth_key().data(), static_cast<int>(this->_internal_cloudflare_auth_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "logo.CloudflarePutKVRequest.cloudflare_auth_key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cloudflare_auth_key(), target);
  }

  // string key = 5;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "logo.CloudflarePutKVRequest.key");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_key(), target);
  }

  // string value = 6;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "logo.CloudflarePutKVRequest.value");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logo.CloudflarePutKVRequest)
  return target;
}

size_t CloudflarePutKVRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logo.CloudflarePutKVRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cloudflare_account = 1;
  if (this->cloudflare_account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cloudflare_account());
  }

  // string cloudflare_namespace = 2;
  if (this->cloudflare_namespace().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cloudflare_namespace());
  }

  // string cloudflare_email = 3;
  if (this->cloudflare_email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cloudflare_email());
  }

  // string cloudflare_auth_key = 4;
  if (this->cloudflare_auth_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cloudflare_auth_key());
  }

  // string key = 5;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 6;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloudflarePutKVRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logo.CloudflarePutKVRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudflarePutKVRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloudflarePutKVRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logo.CloudflarePutKVRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logo.CloudflarePutKVRequest)
    MergeFrom(*source);
  }
}

void CloudflarePutKVRequest::MergeFrom(const CloudflarePutKVRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logo.CloudflarePutKVRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cloudflare_account().size() > 0) {
    _internal_set_cloudflare_account(from._internal_cloudflare_account());
  }
  if (from.cloudflare_namespace().size() > 0) {
    _internal_set_cloudflare_namespace(from._internal_cloudflare_namespace());
  }
  if (from.cloudflare_email().size() > 0) {
    _internal_set_cloudflare_email(from._internal_cloudflare_email());
  }
  if (from.cloudflare_auth_key().size() > 0) {
    _internal_set_cloudflare_auth_key(from._internal_cloudflare_auth_key());
  }
  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void CloudflarePutKVRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logo.CloudflarePutKVRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudflarePutKVRequest::CopyFrom(const CloudflarePutKVRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logo.CloudflarePutKVRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudflarePutKVRequest::IsInitialized() const {
  return true;
}

void CloudflarePutKVRequest::InternalSwap(CloudflarePutKVRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cloudflare_account_.Swap(&other->cloudflare_account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cloudflare_namespace_.Swap(&other->cloudflare_namespace_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cloudflare_email_.Swap(&other->cloudflare_email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cloudflare_auth_key_.Swap(&other->cloudflare_auth_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CloudflarePutKVRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CloudflarePutKVResponse::_Internal {
 public:
};

CloudflarePutKVResponse::CloudflarePutKVResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:logo.CloudflarePutKVResponse)
}
CloudflarePutKVResponse::CloudflarePutKVResponse(const CloudflarePutKVResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:logo.CloudflarePutKVResponse)
}

void CloudflarePutKVResponse::SharedCtor() {
  status_ = false;
}

CloudflarePutKVResponse::~CloudflarePutKVResponse() {
  // @@protoc_insertion_point(destructor:logo.CloudflarePutKVResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CloudflarePutKVResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CloudflarePutKVResponse::ArenaDtor(void* object) {
  CloudflarePutKVResponse* _this = reinterpret_cast< CloudflarePutKVResponse* >(object);
  (void)_this;
}
void CloudflarePutKVResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloudflarePutKVResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloudflarePutKVResponse& CloudflarePutKVResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloudflarePutKVResponse_cloudflare_2eproto.base);
  return *internal_default_instance();
}


void CloudflarePutKVResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:logo.CloudflarePutKVResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloudflarePutKVResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloudflarePutKVResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:logo.CloudflarePutKVResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logo.CloudflarePutKVResponse)
  return target;
}

size_t CloudflarePutKVResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logo.CloudflarePutKVResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloudflarePutKVResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logo.CloudflarePutKVResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudflarePutKVResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloudflarePutKVResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logo.CloudflarePutKVResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logo.CloudflarePutKVResponse)
    MergeFrom(*source);
  }
}

void CloudflarePutKVResponse::MergeFrom(const CloudflarePutKVResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logo.CloudflarePutKVResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void CloudflarePutKVResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logo.CloudflarePutKVResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudflarePutKVResponse::CopyFrom(const CloudflarePutKVResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logo.CloudflarePutKVResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudflarePutKVResponse::IsInitialized() const {
  return true;
}

void CloudflarePutKVResponse::InternalSwap(CloudflarePutKVResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloudflarePutKVResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace logo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::logo::CloudflarePutKVRequest* Arena::CreateMaybeMessage< ::logo::CloudflarePutKVRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::logo::CloudflarePutKVRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::logo::CloudflarePutKVResponse* Arena::CreateMaybeMessage< ::logo::CloudflarePutKVResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::logo::CloudflarePutKVResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
