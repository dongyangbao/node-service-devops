// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logodata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_logodata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_logodata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_logodata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_logodata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_logodata_2eproto;
namespace logo {
class LogoDataRequest;
class LogoDataRequestDefaultTypeInternal;
extern LogoDataRequestDefaultTypeInternal _LogoDataRequest_default_instance_;
class LogoDataResponse;
class LogoDataResponseDefaultTypeInternal;
extern LogoDataResponseDefaultTypeInternal _LogoDataResponse_default_instance_;
}  // namespace logo
PROTOBUF_NAMESPACE_OPEN
template<> ::logo::LogoDataRequest* Arena::CreateMaybeMessage<::logo::LogoDataRequest>(Arena*);
template<> ::logo::LogoDataResponse* Arena::CreateMaybeMessage<::logo::LogoDataResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace logo {

// ===================================================================

class LogoDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:logo.LogoDataRequest) */ {
 public:
  inline LogoDataRequest() : LogoDataRequest(nullptr) {}
  virtual ~LogoDataRequest();

  LogoDataRequest(const LogoDataRequest& from);
  LogoDataRequest(LogoDataRequest&& from) noexcept
    : LogoDataRequest() {
    *this = ::std::move(from);
  }

  inline LogoDataRequest& operator=(const LogoDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoDataRequest& operator=(LogoDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogoDataRequest& default_instance();

  static inline const LogoDataRequest* internal_default_instance() {
    return reinterpret_cast<const LogoDataRequest*>(
               &_LogoDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogoDataRequest& a, LogoDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogoDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogoDataRequest* New() const final {
    return CreateMaybeMessage<LogoDataRequest>(nullptr);
  }

  LogoDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogoDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogoDataRequest& from);
  void MergeFrom(const LogoDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "logo.LogoDataRequest";
  }
  protected:
  explicit LogoDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logodata_2eproto);
    return ::descriptor_table_logodata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeforcesFieldNumber = 1,
    kTopcoderFieldNumber = 2,
    kNikeUsernameFieldNumber = 3,
    kNikePasswordFieldNumber = 4,
  };
  // string codeforces = 1;
  void clear_codeforces();
  const std::string& codeforces() const;
  void set_codeforces(const std::string& value);
  void set_codeforces(std::string&& value);
  void set_codeforces(const char* value);
  void set_codeforces(const char* value, size_t size);
  std::string* mutable_codeforces();
  std::string* release_codeforces();
  void set_allocated_codeforces(std::string* codeforces);
  private:
  const std::string& _internal_codeforces() const;
  void _internal_set_codeforces(const std::string& value);
  std::string* _internal_mutable_codeforces();
  public:

  // string topcoder = 2;
  void clear_topcoder();
  const std::string& topcoder() const;
  void set_topcoder(const std::string& value);
  void set_topcoder(std::string&& value);
  void set_topcoder(const char* value);
  void set_topcoder(const char* value, size_t size);
  std::string* mutable_topcoder();
  std::string* release_topcoder();
  void set_allocated_topcoder(std::string* topcoder);
  private:
  const std::string& _internal_topcoder() const;
  void _internal_set_topcoder(const std::string& value);
  std::string* _internal_mutable_topcoder();
  public:

  // string nike_username = 3;
  void clear_nike_username();
  const std::string& nike_username() const;
  void set_nike_username(const std::string& value);
  void set_nike_username(std::string&& value);
  void set_nike_username(const char* value);
  void set_nike_username(const char* value, size_t size);
  std::string* mutable_nike_username();
  std::string* release_nike_username();
  void set_allocated_nike_username(std::string* nike_username);
  private:
  const std::string& _internal_nike_username() const;
  void _internal_set_nike_username(const std::string& value);
  std::string* _internal_mutable_nike_username();
  public:

  // string nike_password = 4;
  void clear_nike_password();
  const std::string& nike_password() const;
  void set_nike_password(const std::string& value);
  void set_nike_password(std::string&& value);
  void set_nike_password(const char* value);
  void set_nike_password(const char* value, size_t size);
  std::string* mutable_nike_password();
  std::string* release_nike_password();
  void set_allocated_nike_password(std::string* nike_password);
  private:
  const std::string& _internal_nike_password() const;
  void _internal_set_nike_password(const std::string& value);
  std::string* _internal_mutable_nike_password();
  public:

  // @@protoc_insertion_point(class_scope:logo.LogoDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codeforces_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topcoder_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nike_username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nike_password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logodata_2eproto;
};
// -------------------------------------------------------------------

class LogoDataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:logo.LogoDataResponse) */ {
 public:
  inline LogoDataResponse() : LogoDataResponse(nullptr) {}
  virtual ~LogoDataResponse();

  LogoDataResponse(const LogoDataResponse& from);
  LogoDataResponse(LogoDataResponse&& from) noexcept
    : LogoDataResponse() {
    *this = ::std::move(from);
  }

  inline LogoDataResponse& operator=(const LogoDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoDataResponse& operator=(LogoDataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogoDataResponse& default_instance();

  static inline const LogoDataResponse* internal_default_instance() {
    return reinterpret_cast<const LogoDataResponse*>(
               &_LogoDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LogoDataResponse& a, LogoDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoDataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogoDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogoDataResponse* New() const final {
    return CreateMaybeMessage<LogoDataResponse>(nullptr);
  }

  LogoDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogoDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogoDataResponse& from);
  void MergeFrom(const LogoDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "logo.LogoDataResponse";
  }
  protected:
  explicit LogoDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logodata_2eproto);
    return ::descriptor_table_logodata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeforcesFieldNumber = 1,
    kTopcoderFieldNumber = 2,
    kNikeDistanceFieldNumber = 3,
    kNikeActivitiesFieldNumber = 4,
  };
  // int32 codeforces = 1;
  void clear_codeforces();
  ::PROTOBUF_NAMESPACE_ID::int32 codeforces() const;
  void set_codeforces(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_codeforces() const;
  void _internal_set_codeforces(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 topcoder = 2;
  void clear_topcoder();
  ::PROTOBUF_NAMESPACE_ID::int32 topcoder() const;
  void set_topcoder(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_topcoder() const;
  void _internal_set_topcoder(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double nike_distance = 3;
  void clear_nike_distance();
  double nike_distance() const;
  void set_nike_distance(double value);
  private:
  double _internal_nike_distance() const;
  void _internal_set_nike_distance(double value);
  public:

  // int32 nike_activities = 4;
  void clear_nike_activities();
  ::PROTOBUF_NAMESPACE_ID::int32 nike_activities() const;
  void set_nike_activities(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nike_activities() const;
  void _internal_set_nike_activities(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:logo.LogoDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 codeforces_;
  ::PROTOBUF_NAMESPACE_ID::int32 topcoder_;
  double nike_distance_;
  ::PROTOBUF_NAMESPACE_ID::int32 nike_activities_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logodata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogoDataRequest

// string codeforces = 1;
inline void LogoDataRequest::clear_codeforces() {
  codeforces_.ClearToEmpty();
}
inline const std::string& LogoDataRequest::codeforces() const {
  // @@protoc_insertion_point(field_get:logo.LogoDataRequest.codeforces)
  return _internal_codeforces();
}
inline void LogoDataRequest::set_codeforces(const std::string& value) {
  _internal_set_codeforces(value);
  // @@protoc_insertion_point(field_set:logo.LogoDataRequest.codeforces)
}
inline std::string* LogoDataRequest::mutable_codeforces() {
  // @@protoc_insertion_point(field_mutable:logo.LogoDataRequest.codeforces)
  return _internal_mutable_codeforces();
}
inline const std::string& LogoDataRequest::_internal_codeforces() const {
  return codeforces_.Get();
}
inline void LogoDataRequest::_internal_set_codeforces(const std::string& value) {
  
  codeforces_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogoDataRequest::set_codeforces(std::string&& value) {
  
  codeforces_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:logo.LogoDataRequest.codeforces)
}
inline void LogoDataRequest::set_codeforces(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  codeforces_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:logo.LogoDataRequest.codeforces)
}
inline void LogoDataRequest::set_codeforces(const char* value,
    size_t size) {
  
  codeforces_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:logo.LogoDataRequest.codeforces)
}
inline std::string* LogoDataRequest::_internal_mutable_codeforces() {
  
  return codeforces_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogoDataRequest::release_codeforces() {
  // @@protoc_insertion_point(field_release:logo.LogoDataRequest.codeforces)
  return codeforces_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogoDataRequest::set_allocated_codeforces(std::string* codeforces) {
  if (codeforces != nullptr) {
    
  } else {
    
  }
  codeforces_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), codeforces,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:logo.LogoDataRequest.codeforces)
}

// string topcoder = 2;
inline void LogoDataRequest::clear_topcoder() {
  topcoder_.ClearToEmpty();
}
inline const std::string& LogoDataRequest::topcoder() const {
  // @@protoc_insertion_point(field_get:logo.LogoDataRequest.topcoder)
  return _internal_topcoder();
}
inline void LogoDataRequest::set_topcoder(const std::string& value) {
  _internal_set_topcoder(value);
  // @@protoc_insertion_point(field_set:logo.LogoDataRequest.topcoder)
}
inline std::string* LogoDataRequest::mutable_topcoder() {
  // @@protoc_insertion_point(field_mutable:logo.LogoDataRequest.topcoder)
  return _internal_mutable_topcoder();
}
inline const std::string& LogoDataRequest::_internal_topcoder() const {
  return topcoder_.Get();
}
inline void LogoDataRequest::_internal_set_topcoder(const std::string& value) {
  
  topcoder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogoDataRequest::set_topcoder(std::string&& value) {
  
  topcoder_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:logo.LogoDataRequest.topcoder)
}
inline void LogoDataRequest::set_topcoder(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topcoder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:logo.LogoDataRequest.topcoder)
}
inline void LogoDataRequest::set_topcoder(const char* value,
    size_t size) {
  
  topcoder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:logo.LogoDataRequest.topcoder)
}
inline std::string* LogoDataRequest::_internal_mutable_topcoder() {
  
  return topcoder_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogoDataRequest::release_topcoder() {
  // @@protoc_insertion_point(field_release:logo.LogoDataRequest.topcoder)
  return topcoder_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogoDataRequest::set_allocated_topcoder(std::string* topcoder) {
  if (topcoder != nullptr) {
    
  } else {
    
  }
  topcoder_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topcoder,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:logo.LogoDataRequest.topcoder)
}

// string nike_username = 3;
inline void LogoDataRequest::clear_nike_username() {
  nike_username_.ClearToEmpty();
}
inline const std::string& LogoDataRequest::nike_username() const {
  // @@protoc_insertion_point(field_get:logo.LogoDataRequest.nike_username)
  return _internal_nike_username();
}
inline void LogoDataRequest::set_nike_username(const std::string& value) {
  _internal_set_nike_username(value);
  // @@protoc_insertion_point(field_set:logo.LogoDataRequest.nike_username)
}
inline std::string* LogoDataRequest::mutable_nike_username() {
  // @@protoc_insertion_point(field_mutable:logo.LogoDataRequest.nike_username)
  return _internal_mutable_nike_username();
}
inline const std::string& LogoDataRequest::_internal_nike_username() const {
  return nike_username_.Get();
}
inline void LogoDataRequest::_internal_set_nike_username(const std::string& value) {
  
  nike_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogoDataRequest::set_nike_username(std::string&& value) {
  
  nike_username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:logo.LogoDataRequest.nike_username)
}
inline void LogoDataRequest::set_nike_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nike_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:logo.LogoDataRequest.nike_username)
}
inline void LogoDataRequest::set_nike_username(const char* value,
    size_t size) {
  
  nike_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:logo.LogoDataRequest.nike_username)
}
inline std::string* LogoDataRequest::_internal_mutable_nike_username() {
  
  return nike_username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogoDataRequest::release_nike_username() {
  // @@protoc_insertion_point(field_release:logo.LogoDataRequest.nike_username)
  return nike_username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogoDataRequest::set_allocated_nike_username(std::string* nike_username) {
  if (nike_username != nullptr) {
    
  } else {
    
  }
  nike_username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nike_username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:logo.LogoDataRequest.nike_username)
}

// string nike_password = 4;
inline void LogoDataRequest::clear_nike_password() {
  nike_password_.ClearToEmpty();
}
inline const std::string& LogoDataRequest::nike_password() const {
  // @@protoc_insertion_point(field_get:logo.LogoDataRequest.nike_password)
  return _internal_nike_password();
}
inline void LogoDataRequest::set_nike_password(const std::string& value) {
  _internal_set_nike_password(value);
  // @@protoc_insertion_point(field_set:logo.LogoDataRequest.nike_password)
}
inline std::string* LogoDataRequest::mutable_nike_password() {
  // @@protoc_insertion_point(field_mutable:logo.LogoDataRequest.nike_password)
  return _internal_mutable_nike_password();
}
inline const std::string& LogoDataRequest::_internal_nike_password() const {
  return nike_password_.Get();
}
inline void LogoDataRequest::_internal_set_nike_password(const std::string& value) {
  
  nike_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogoDataRequest::set_nike_password(std::string&& value) {
  
  nike_password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:logo.LogoDataRequest.nike_password)
}
inline void LogoDataRequest::set_nike_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nike_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:logo.LogoDataRequest.nike_password)
}
inline void LogoDataRequest::set_nike_password(const char* value,
    size_t size) {
  
  nike_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:logo.LogoDataRequest.nike_password)
}
inline std::string* LogoDataRequest::_internal_mutable_nike_password() {
  
  return nike_password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogoDataRequest::release_nike_password() {
  // @@protoc_insertion_point(field_release:logo.LogoDataRequest.nike_password)
  return nike_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogoDataRequest::set_allocated_nike_password(std::string* nike_password) {
  if (nike_password != nullptr) {
    
  } else {
    
  }
  nike_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nike_password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:logo.LogoDataRequest.nike_password)
}

// -------------------------------------------------------------------

// LogoDataResponse

// int32 codeforces = 1;
inline void LogoDataResponse::clear_codeforces() {
  codeforces_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoDataResponse::_internal_codeforces() const {
  return codeforces_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoDataResponse::codeforces() const {
  // @@protoc_insertion_point(field_get:logo.LogoDataResponse.codeforces)
  return _internal_codeforces();
}
inline void LogoDataResponse::_internal_set_codeforces(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  codeforces_ = value;
}
inline void LogoDataResponse::set_codeforces(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_codeforces(value);
  // @@protoc_insertion_point(field_set:logo.LogoDataResponse.codeforces)
}

// int32 topcoder = 2;
inline void LogoDataResponse::clear_topcoder() {
  topcoder_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoDataResponse::_internal_topcoder() const {
  return topcoder_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoDataResponse::topcoder() const {
  // @@protoc_insertion_point(field_get:logo.LogoDataResponse.topcoder)
  return _internal_topcoder();
}
inline void LogoDataResponse::_internal_set_topcoder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  topcoder_ = value;
}
inline void LogoDataResponse::set_topcoder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_topcoder(value);
  // @@protoc_insertion_point(field_set:logo.LogoDataResponse.topcoder)
}

// double nike_distance = 3;
inline void LogoDataResponse::clear_nike_distance() {
  nike_distance_ = 0;
}
inline double LogoDataResponse::_internal_nike_distance() const {
  return nike_distance_;
}
inline double LogoDataResponse::nike_distance() const {
  // @@protoc_insertion_point(field_get:logo.LogoDataResponse.nike_distance)
  return _internal_nike_distance();
}
inline void LogoDataResponse::_internal_set_nike_distance(double value) {
  
  nike_distance_ = value;
}
inline void LogoDataResponse::set_nike_distance(double value) {
  _internal_set_nike_distance(value);
  // @@protoc_insertion_point(field_set:logo.LogoDataResponse.nike_distance)
}

// int32 nike_activities = 4;
inline void LogoDataResponse::clear_nike_activities() {
  nike_activities_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoDataResponse::_internal_nike_activities() const {
  return nike_activities_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoDataResponse::nike_activities() const {
  // @@protoc_insertion_point(field_get:logo.LogoDataResponse.nike_activities)
  return _internal_nike_activities();
}
inline void LogoDataResponse::_internal_set_nike_activities(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nike_activities_ = value;
}
inline void LogoDataResponse::set_nike_activities(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nike_activities(value);
  // @@protoc_insertion_point(field_set:logo.LogoDataResponse.nike_activities)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace logo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_logodata_2eproto
