// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cloudflare.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cloudflare_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cloudflare_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cloudflare_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cloudflare_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cloudflare_2eproto;
namespace logo {
class CloudflarePutKVRequest;
class CloudflarePutKVRequestDefaultTypeInternal;
extern CloudflarePutKVRequestDefaultTypeInternal _CloudflarePutKVRequest_default_instance_;
class CloudflarePutKVResponse;
class CloudflarePutKVResponseDefaultTypeInternal;
extern CloudflarePutKVResponseDefaultTypeInternal _CloudflarePutKVResponse_default_instance_;
}  // namespace logo
PROTOBUF_NAMESPACE_OPEN
template<> ::logo::CloudflarePutKVRequest* Arena::CreateMaybeMessage<::logo::CloudflarePutKVRequest>(Arena*);
template<> ::logo::CloudflarePutKVResponse* Arena::CreateMaybeMessage<::logo::CloudflarePutKVResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace logo {

// ===================================================================

class CloudflarePutKVRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:logo.CloudflarePutKVRequest) */ {
 public:
  inline CloudflarePutKVRequest() : CloudflarePutKVRequest(nullptr) {}
  virtual ~CloudflarePutKVRequest();

  CloudflarePutKVRequest(const CloudflarePutKVRequest& from);
  CloudflarePutKVRequest(CloudflarePutKVRequest&& from) noexcept
    : CloudflarePutKVRequest() {
    *this = ::std::move(from);
  }

  inline CloudflarePutKVRequest& operator=(const CloudflarePutKVRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloudflarePutKVRequest& operator=(CloudflarePutKVRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloudflarePutKVRequest& default_instance();

  static inline const CloudflarePutKVRequest* internal_default_instance() {
    return reinterpret_cast<const CloudflarePutKVRequest*>(
               &_CloudflarePutKVRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CloudflarePutKVRequest& a, CloudflarePutKVRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CloudflarePutKVRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloudflarePutKVRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloudflarePutKVRequest* New() const final {
    return CreateMaybeMessage<CloudflarePutKVRequest>(nullptr);
  }

  CloudflarePutKVRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloudflarePutKVRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloudflarePutKVRequest& from);
  void MergeFrom(const CloudflarePutKVRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloudflarePutKVRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "logo.CloudflarePutKVRequest";
  }
  protected:
  explicit CloudflarePutKVRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cloudflare_2eproto);
    return ::descriptor_table_cloudflare_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCloudflareAccountFieldNumber = 1,
    kCloudflareNamespaceFieldNumber = 2,
    kCloudflareEmailFieldNumber = 3,
    kCloudflareAuthKeyFieldNumber = 4,
    kKeyFieldNumber = 5,
    kValueFieldNumber = 6,
  };
  // string cloudflare_account = 1;
  void clear_cloudflare_account();
  const std::string& cloudflare_account() const;
  void set_cloudflare_account(const std::string& value);
  void set_cloudflare_account(std::string&& value);
  void set_cloudflare_account(const char* value);
  void set_cloudflare_account(const char* value, size_t size);
  std::string* mutable_cloudflare_account();
  std::string* release_cloudflare_account();
  void set_allocated_cloudflare_account(std::string* cloudflare_account);
  private:
  const std::string& _internal_cloudflare_account() const;
  void _internal_set_cloudflare_account(const std::string& value);
  std::string* _internal_mutable_cloudflare_account();
  public:

  // string cloudflare_namespace = 2;
  void clear_cloudflare_namespace();
  const std::string& cloudflare_namespace() const;
  void set_cloudflare_namespace(const std::string& value);
  void set_cloudflare_namespace(std::string&& value);
  void set_cloudflare_namespace(const char* value);
  void set_cloudflare_namespace(const char* value, size_t size);
  std::string* mutable_cloudflare_namespace();
  std::string* release_cloudflare_namespace();
  void set_allocated_cloudflare_namespace(std::string* cloudflare_namespace);
  private:
  const std::string& _internal_cloudflare_namespace() const;
  void _internal_set_cloudflare_namespace(const std::string& value);
  std::string* _internal_mutable_cloudflare_namespace();
  public:

  // string cloudflare_email = 3;
  void clear_cloudflare_email();
  const std::string& cloudflare_email() const;
  void set_cloudflare_email(const std::string& value);
  void set_cloudflare_email(std::string&& value);
  void set_cloudflare_email(const char* value);
  void set_cloudflare_email(const char* value, size_t size);
  std::string* mutable_cloudflare_email();
  std::string* release_cloudflare_email();
  void set_allocated_cloudflare_email(std::string* cloudflare_email);
  private:
  const std::string& _internal_cloudflare_email() const;
  void _internal_set_cloudflare_email(const std::string& value);
  std::string* _internal_mutable_cloudflare_email();
  public:

  // string cloudflare_auth_key = 4;
  void clear_cloudflare_auth_key();
  const std::string& cloudflare_auth_key() const;
  void set_cloudflare_auth_key(const std::string& value);
  void set_cloudflare_auth_key(std::string&& value);
  void set_cloudflare_auth_key(const char* value);
  void set_cloudflare_auth_key(const char* value, size_t size);
  std::string* mutable_cloudflare_auth_key();
  std::string* release_cloudflare_auth_key();
  void set_allocated_cloudflare_auth_key(std::string* cloudflare_auth_key);
  private:
  const std::string& _internal_cloudflare_auth_key() const;
  void _internal_set_cloudflare_auth_key(const std::string& value);
  std::string* _internal_mutable_cloudflare_auth_key();
  public:

  // string key = 5;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 6;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:logo.CloudflarePutKVRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cloudflare_account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cloudflare_namespace_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cloudflare_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cloudflare_auth_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudflare_2eproto;
};
// -------------------------------------------------------------------

class CloudflarePutKVResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:logo.CloudflarePutKVResponse) */ {
 public:
  inline CloudflarePutKVResponse() : CloudflarePutKVResponse(nullptr) {}
  virtual ~CloudflarePutKVResponse();

  CloudflarePutKVResponse(const CloudflarePutKVResponse& from);
  CloudflarePutKVResponse(CloudflarePutKVResponse&& from) noexcept
    : CloudflarePutKVResponse() {
    *this = ::std::move(from);
  }

  inline CloudflarePutKVResponse& operator=(const CloudflarePutKVResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloudflarePutKVResponse& operator=(CloudflarePutKVResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloudflarePutKVResponse& default_instance();

  static inline const CloudflarePutKVResponse* internal_default_instance() {
    return reinterpret_cast<const CloudflarePutKVResponse*>(
               &_CloudflarePutKVResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CloudflarePutKVResponse& a, CloudflarePutKVResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CloudflarePutKVResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloudflarePutKVResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloudflarePutKVResponse* New() const final {
    return CreateMaybeMessage<CloudflarePutKVResponse>(nullptr);
  }

  CloudflarePutKVResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloudflarePutKVResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloudflarePutKVResponse& from);
  void MergeFrom(const CloudflarePutKVResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloudflarePutKVResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "logo.CloudflarePutKVResponse";
  }
  protected:
  explicit CloudflarePutKVResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cloudflare_2eproto);
    return ::descriptor_table_cloudflare_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:logo.CloudflarePutKVResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudflare_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CloudflarePutKVRequest

// string cloudflare_account = 1;
inline void CloudflarePutKVRequest::clear_cloudflare_account() {
  cloudflare_account_.ClearToEmpty();
}
inline const std::string& CloudflarePutKVRequest::cloudflare_account() const {
  // @@protoc_insertion_point(field_get:logo.CloudflarePutKVRequest.cloudflare_account)
  return _internal_cloudflare_account();
}
inline void CloudflarePutKVRequest::set_cloudflare_account(const std::string& value) {
  _internal_set_cloudflare_account(value);
  // @@protoc_insertion_point(field_set:logo.CloudflarePutKVRequest.cloudflare_account)
}
inline std::string* CloudflarePutKVRequest::mutable_cloudflare_account() {
  // @@protoc_insertion_point(field_mutable:logo.CloudflarePutKVRequest.cloudflare_account)
  return _internal_mutable_cloudflare_account();
}
inline const std::string& CloudflarePutKVRequest::_internal_cloudflare_account() const {
  return cloudflare_account_.Get();
}
inline void CloudflarePutKVRequest::_internal_set_cloudflare_account(const std::string& value) {
  
  cloudflare_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CloudflarePutKVRequest::set_cloudflare_account(std::string&& value) {
  
  cloudflare_account_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:logo.CloudflarePutKVRequest.cloudflare_account)
}
inline void CloudflarePutKVRequest::set_cloudflare_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cloudflare_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:logo.CloudflarePutKVRequest.cloudflare_account)
}
inline void CloudflarePutKVRequest::set_cloudflare_account(const char* value,
    size_t size) {
  
  cloudflare_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:logo.CloudflarePutKVRequest.cloudflare_account)
}
inline std::string* CloudflarePutKVRequest::_internal_mutable_cloudflare_account() {
  
  return cloudflare_account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CloudflarePutKVRequest::release_cloudflare_account() {
  // @@protoc_insertion_point(field_release:logo.CloudflarePutKVRequest.cloudflare_account)
  return cloudflare_account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CloudflarePutKVRequest::set_allocated_cloudflare_account(std::string* cloudflare_account) {
  if (cloudflare_account != nullptr) {
    
  } else {
    
  }
  cloudflare_account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cloudflare_account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:logo.CloudflarePutKVRequest.cloudflare_account)
}

// string cloudflare_namespace = 2;
inline void CloudflarePutKVRequest::clear_cloudflare_namespace() {
  cloudflare_namespace_.ClearToEmpty();
}
inline const std::string& CloudflarePutKVRequest::cloudflare_namespace() const {
  // @@protoc_insertion_point(field_get:logo.CloudflarePutKVRequest.cloudflare_namespace)
  return _internal_cloudflare_namespace();
}
inline void CloudflarePutKVRequest::set_cloudflare_namespace(const std::string& value) {
  _internal_set_cloudflare_namespace(value);
  // @@protoc_insertion_point(field_set:logo.CloudflarePutKVRequest.cloudflare_namespace)
}
inline std::string* CloudflarePutKVRequest::mutable_cloudflare_namespace() {
  // @@protoc_insertion_point(field_mutable:logo.CloudflarePutKVRequest.cloudflare_namespace)
  return _internal_mutable_cloudflare_namespace();
}
inline const std::string& CloudflarePutKVRequest::_internal_cloudflare_namespace() const {
  return cloudflare_namespace_.Get();
}
inline void CloudflarePutKVRequest::_internal_set_cloudflare_namespace(const std::string& value) {
  
  cloudflare_namespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CloudflarePutKVRequest::set_cloudflare_namespace(std::string&& value) {
  
  cloudflare_namespace_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:logo.CloudflarePutKVRequest.cloudflare_namespace)
}
inline void CloudflarePutKVRequest::set_cloudflare_namespace(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cloudflare_namespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:logo.CloudflarePutKVRequest.cloudflare_namespace)
}
inline void CloudflarePutKVRequest::set_cloudflare_namespace(const char* value,
    size_t size) {
  
  cloudflare_namespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:logo.CloudflarePutKVRequest.cloudflare_namespace)
}
inline std::string* CloudflarePutKVRequest::_internal_mutable_cloudflare_namespace() {
  
  return cloudflare_namespace_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CloudflarePutKVRequest::release_cloudflare_namespace() {
  // @@protoc_insertion_point(field_release:logo.CloudflarePutKVRequest.cloudflare_namespace)
  return cloudflare_namespace_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CloudflarePutKVRequest::set_allocated_cloudflare_namespace(std::string* cloudflare_namespace) {
  if (cloudflare_namespace != nullptr) {
    
  } else {
    
  }
  cloudflare_namespace_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cloudflare_namespace,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:logo.CloudflarePutKVRequest.cloudflare_namespace)
}

// string cloudflare_email = 3;
inline void CloudflarePutKVRequest::clear_cloudflare_email() {
  cloudflare_email_.ClearToEmpty();
}
inline const std::string& CloudflarePutKVRequest::cloudflare_email() const {
  // @@protoc_insertion_point(field_get:logo.CloudflarePutKVRequest.cloudflare_email)
  return _internal_cloudflare_email();
}
inline void CloudflarePutKVRequest::set_cloudflare_email(const std::string& value) {
  _internal_set_cloudflare_email(value);
  // @@protoc_insertion_point(field_set:logo.CloudflarePutKVRequest.cloudflare_email)
}
inline std::string* CloudflarePutKVRequest::mutable_cloudflare_email() {
  // @@protoc_insertion_point(field_mutable:logo.CloudflarePutKVRequest.cloudflare_email)
  return _internal_mutable_cloudflare_email();
}
inline const std::string& CloudflarePutKVRequest::_internal_cloudflare_email() const {
  return cloudflare_email_.Get();
}
inline void CloudflarePutKVRequest::_internal_set_cloudflare_email(const std::string& value) {
  
  cloudflare_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CloudflarePutKVRequest::set_cloudflare_email(std::string&& value) {
  
  cloudflare_email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:logo.CloudflarePutKVRequest.cloudflare_email)
}
inline void CloudflarePutKVRequest::set_cloudflare_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cloudflare_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:logo.CloudflarePutKVRequest.cloudflare_email)
}
inline void CloudflarePutKVRequest::set_cloudflare_email(const char* value,
    size_t size) {
  
  cloudflare_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:logo.CloudflarePutKVRequest.cloudflare_email)
}
inline std::string* CloudflarePutKVRequest::_internal_mutable_cloudflare_email() {
  
  return cloudflare_email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CloudflarePutKVRequest::release_cloudflare_email() {
  // @@protoc_insertion_point(field_release:logo.CloudflarePutKVRequest.cloudflare_email)
  return cloudflare_email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CloudflarePutKVRequest::set_allocated_cloudflare_email(std::string* cloudflare_email) {
  if (cloudflare_email != nullptr) {
    
  } else {
    
  }
  cloudflare_email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cloudflare_email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:logo.CloudflarePutKVRequest.cloudflare_email)
}

// string cloudflare_auth_key = 4;
inline void CloudflarePutKVRequest::clear_cloudflare_auth_key() {
  cloudflare_auth_key_.ClearToEmpty();
}
inline const std::string& CloudflarePutKVRequest::cloudflare_auth_key() const {
  // @@protoc_insertion_point(field_get:logo.CloudflarePutKVRequest.cloudflare_auth_key)
  return _internal_cloudflare_auth_key();
}
inline void CloudflarePutKVRequest::set_cloudflare_auth_key(const std::string& value) {
  _internal_set_cloudflare_auth_key(value);
  // @@protoc_insertion_point(field_set:logo.CloudflarePutKVRequest.cloudflare_auth_key)
}
inline std::string* CloudflarePutKVRequest::mutable_cloudflare_auth_key() {
  // @@protoc_insertion_point(field_mutable:logo.CloudflarePutKVRequest.cloudflare_auth_key)
  return _internal_mutable_cloudflare_auth_key();
}
inline const std::string& CloudflarePutKVRequest::_internal_cloudflare_auth_key() const {
  return cloudflare_auth_key_.Get();
}
inline void CloudflarePutKVRequest::_internal_set_cloudflare_auth_key(const std::string& value) {
  
  cloudflare_auth_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CloudflarePutKVRequest::set_cloudflare_auth_key(std::string&& value) {
  
  cloudflare_auth_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:logo.CloudflarePutKVRequest.cloudflare_auth_key)
}
inline void CloudflarePutKVRequest::set_cloudflare_auth_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cloudflare_auth_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:logo.CloudflarePutKVRequest.cloudflare_auth_key)
}
inline void CloudflarePutKVRequest::set_cloudflare_auth_key(const char* value,
    size_t size) {
  
  cloudflare_auth_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:logo.CloudflarePutKVRequest.cloudflare_auth_key)
}
inline std::string* CloudflarePutKVRequest::_internal_mutable_cloudflare_auth_key() {
  
  return cloudflare_auth_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CloudflarePutKVRequest::release_cloudflare_auth_key() {
  // @@protoc_insertion_point(field_release:logo.CloudflarePutKVRequest.cloudflare_auth_key)
  return cloudflare_auth_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CloudflarePutKVRequest::set_allocated_cloudflare_auth_key(std::string* cloudflare_auth_key) {
  if (cloudflare_auth_key != nullptr) {
    
  } else {
    
  }
  cloudflare_auth_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cloudflare_auth_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:logo.CloudflarePutKVRequest.cloudflare_auth_key)
}

// string key = 5;
inline void CloudflarePutKVRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& CloudflarePutKVRequest::key() const {
  // @@protoc_insertion_point(field_get:logo.CloudflarePutKVRequest.key)
  return _internal_key();
}
inline void CloudflarePutKVRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:logo.CloudflarePutKVRequest.key)
}
inline std::string* CloudflarePutKVRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:logo.CloudflarePutKVRequest.key)
  return _internal_mutable_key();
}
inline const std::string& CloudflarePutKVRequest::_internal_key() const {
  return key_.Get();
}
inline void CloudflarePutKVRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CloudflarePutKVRequest::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:logo.CloudflarePutKVRequest.key)
}
inline void CloudflarePutKVRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:logo.CloudflarePutKVRequest.key)
}
inline void CloudflarePutKVRequest::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:logo.CloudflarePutKVRequest.key)
}
inline std::string* CloudflarePutKVRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CloudflarePutKVRequest::release_key() {
  // @@protoc_insertion_point(field_release:logo.CloudflarePutKVRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CloudflarePutKVRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:logo.CloudflarePutKVRequest.key)
}

// string value = 6;
inline void CloudflarePutKVRequest::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& CloudflarePutKVRequest::value() const {
  // @@protoc_insertion_point(field_get:logo.CloudflarePutKVRequest.value)
  return _internal_value();
}
inline void CloudflarePutKVRequest::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:logo.CloudflarePutKVRequest.value)
}
inline std::string* CloudflarePutKVRequest::mutable_value() {
  // @@protoc_insertion_point(field_mutable:logo.CloudflarePutKVRequest.value)
  return _internal_mutable_value();
}
inline const std::string& CloudflarePutKVRequest::_internal_value() const {
  return value_.Get();
}
inline void CloudflarePutKVRequest::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CloudflarePutKVRequest::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:logo.CloudflarePutKVRequest.value)
}
inline void CloudflarePutKVRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:logo.CloudflarePutKVRequest.value)
}
inline void CloudflarePutKVRequest::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:logo.CloudflarePutKVRequest.value)
}
inline std::string* CloudflarePutKVRequest::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CloudflarePutKVRequest::release_value() {
  // @@protoc_insertion_point(field_release:logo.CloudflarePutKVRequest.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CloudflarePutKVRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:logo.CloudflarePutKVRequest.value)
}

// -------------------------------------------------------------------

// CloudflarePutKVResponse

// bool status = 1;
inline void CloudflarePutKVResponse::clear_status() {
  status_ = false;
}
inline bool CloudflarePutKVResponse::_internal_status() const {
  return status_;
}
inline bool CloudflarePutKVResponse::status() const {
  // @@protoc_insertion_point(field_get:logo.CloudflarePutKVResponse.status)
  return _internal_status();
}
inline void CloudflarePutKVResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void CloudflarePutKVResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:logo.CloudflarePutKVResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace logo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cloudflare_2eproto
